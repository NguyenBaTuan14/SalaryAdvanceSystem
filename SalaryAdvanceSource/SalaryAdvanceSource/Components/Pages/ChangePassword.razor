@page "/change-password"
@inject NavigationManager Navigation
@inject UserState UserState
@inject ILoginService LoginService
@rendermode InteractiveServer

<h3>Change Password</h3>

@* @if (!string.IsNullOrEmpty(message))
{
    <div class="alert @messageCss">@message</div>
}

<div class="form-group">
    <label>Current Password <span style="color:red">*</span></label>
    <input type="password" class="form-control" @bind="changePasswordModel.CurrentPassword" />
</div>

<div class="form-group">
    <label>New Password <span style="color:red">*</span></label>
    <input type="password" class="form-control" @bind="changePasswordModel.NewPassword" />
</div>

<div class="form-group">
    <label>Confirm New Password <span style="color:red">*</span></label>
    <input type="password" class="form-control" @bind="changePasswordModel.ConfirmNewPassword" />
</div>

<div style="margin-top: 20px;">
    <button class="btn btn-primary" @onclick="HandleChangePassword">Change Password</button>
    <button class="btn btn-outline-secondary" @onclick="GoBack">Back</button>
</div> *@

@code {
    ChangePassDto changePasswordModel = new ChangePassDto();
    string message;
    string messageCss;

    private async Task HandleChangePassword()
    {
        var user = UserState.CurrentUser;

        if (user == null)
        {
            message = "You must be logged in to change password.";
            messageCss = "alert-danger";
            return;
        }

        if (string.IsNullOrWhiteSpace(changePasswordModel.CurrentPassword) ||
            string.IsNullOrWhiteSpace(changePasswordModel.NewPassword) ||
            string.IsNullOrWhiteSpace(changePasswordModel.ConfirmNewPassword))
        {
            message = "Please fill all required fields.";
            messageCss = "alert-danger";
            return;
        }

        // if (!BCrypt.Net.BCrypt.Verify(changePasswordModel.CurrentPassword, user.Password))
        // {
        //     message = "Current password is incorrect.";
        //     messageCss = "alert-danger";
        //     return;
        // }

        // if (BCrypt.Net.BCrypt.Verify(changePasswordModel.NewPassword, user.Password))
        // {
        //     message = "New password cannot be the same as the current password.";
        //     messageCss = "alert-danger";
        //     return;
        // }

        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmNewPassword)
        {
            message = "Confirm password does not match new password.";
            messageCss = "alert-danger";
            return;
        }

        if (changePasswordModel.NewPassword.Length < 6)
        {
            message = "New password must be at least 6 characters.";
            messageCss = "alert-danger";
            return;
        }

        var ok = await LoginService.UpdatePasswordAsync(user.UserId, changePasswordModel.NewPassword);
        if (!ok)
        {
            message = "Failed to update password. Please try again.";
            messageCss = "alert-danger";
            return;
        }

        // Success: clear any cached user info to force re-login
        UserState.CurrentUser = null;

       
        message = "Password changed successfully. Please login again.";
        messageCss = "alert-success";

        // Redirect to login after short delay (optional)
        await Task.Delay(800);
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/profile");
    }
}

