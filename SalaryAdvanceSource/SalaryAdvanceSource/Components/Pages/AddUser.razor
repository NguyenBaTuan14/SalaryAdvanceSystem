@page "/employees-management/add-new-user"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SalaryAdvanceSource.DTOs
@using SalaryAdvanceSource.Exceptions
@using SalaryAdvanceSource.Models
@using SalaryAdvanceSource.Services
@inject IDepartmentsService DepartmentsService
@inject IEmployeesService EmployeesService
@rendermode InteractiveServer
@inject NavigationManager Navigation

<h3 class="mb-4">Add New User</h3>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit" FormName="UserForm" class="p-3 border rounded bg-light">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-6">
            <label for="userName" class="form-label">Username</label>
            <InputText id="userName" @bind-Value="user.UserName" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.UserName)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" @bind-Value="user.Password" type="password" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.Password)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="departmentId" class="form-label">Department</label>
            <InputSelect id="departmentId" @bind-Value="user.DepartmentId" class="form-select form-select-sm">
                <option value="">--Chọn phòng ban--</option>
                @foreach (var dep in listDepartments)
                {
                    <option value="@dep.DepartmentId">@dep.DepartmentName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.DepartmentId)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="fullName" class="form-label">Full Name</label>
            <InputText id="fullName" @bind-Value="user.FullName" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.FullName)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.Email)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="phoneNumber" class="form-label">Phone</label>
            <InputText id="phoneNumber" @bind-Value="user.PhoneNumber" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.PhoneNumber)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="address" class="form-label">Address</label>
            <InputText id="address" @bind-Value="user.Address" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.Address)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="dob" class="form-label">Date Of Birth</label>
            <InputDate id="dob" @bind-Value="user.DateOfBirth" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.DateOfBirth)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label class="form-label d-block">Gender</label>
            <InputRadioGroup @bind-Value="user.Gender" Name="gender">
                <div class="d-flex gap-3">
                    @foreach (GenderType gender in Enum.GetValues(typeof(GenderType)))
                    {
                        <div class="form-check form-check-inline">
                            <InputRadio class="form-check-input" Value="@gender" />
                            <label class="form-check-label">@gender</label>
                        </div>
                    }
                </div>
            </InputRadioGroup>
            <ValidationMessage For="@(() => user.Gender)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="role" class="form-label">Role</label>
            <InputSelect id="role" class="form-select form-select-sm" @bind-Value="user.Role">
                @foreach (RoleType role in Enum.GetValues(typeof(RoleType)))
                {
                    <option value="@role">@role</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.Role)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="position" class="form-label">Position</label>
            <InputSelect id="position" class="form-select form-select-sm" @bind-Value="user.Position">
                @foreach (PositionType position in Enum.GetValues(typeof(PositionType)))
                {
                    <option value="@position">@position</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.Position)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="onboardDate" class="form-label">Onboard Date</label>
            <InputDate id="onboardDate" @bind-Value="user.OnboardDate" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.OnboardDate)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="salary" class="form-label">Basic Salary</label>
            <div class="input-group input-group-sm">
                <input id="salary"
                       class="form-control"
                       value="@formattedSalary"
                       @oninput="OnSalaryInput" />
                <span class="input-group-text">₫</span>
            </div>
            <ValidationMessage For="@(() => user.BasicSalary)" class="text-danger small" />
        </div>
    </div>

    <div class="mt-4 d-flex gap-2">
        <button type="submit" class="btn btn-primary btn-sm">Gửi</button>
        <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Navigation.NavigateTo(backUrl)">Huỷ</button>
    </div>
</EditForm>

<PopupNotification @ref="notificationModal" Title="Notification" />

@code {
    private CreateUserDto user = new();
    private List<GetDepartmentDto> listDepartments = new();
    private PopupNotification notificationModal = null!;
    private string backUrl = "/employees-management";

    protected override async Task OnInitializedAsync()
    {
        await GetListDepartments();
    }

    private async Task GetListDepartments()
    {
        try
        {
            listDepartments = await DepartmentsService.GetAllDepartmentAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while querying Database: {ex.Message}");
        }
    }

    private string formattedSalary = "";

    private void OnSalaryInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";

        var digitsOnly = new string(input.Where(char.IsDigit).ToArray());

        if (decimal.TryParse(digitsOnly, out var value))
        {
            user.BasicSalary = value;
            formattedSalary = string.Format("{0:N0}", value);
        }
        else
        {
            user.BasicSalary = 0;
            formattedSalary = "";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await EmployeesService.CreateUserAsync(user);
            Navigation.NavigateTo("/employees-management");
        }
        catch (BusinessException ex)
        {
            notificationModal.Show(ex.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while querying Database: {ex.Message}");
        }
    }
}
