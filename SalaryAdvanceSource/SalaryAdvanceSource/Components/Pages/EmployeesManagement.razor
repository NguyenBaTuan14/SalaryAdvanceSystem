@page "/employees-management"
@using SalaryAdvanceSource.DTOs
@using SalaryAdvanceSource.Services
@inject IEmployeesService EmployeesService
@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Employees Management</PageTitle>

<h1>Employees Management</h1>

<div class="input-group input-group-sm mb-3" style="max-width: 500px;">
    <input type="text"
           class="form-control"
           placeholder="Search..."
           @bind="searchTerm"
           @bind:event="oninput" />

    @if (!string.IsNullOrWhiteSpace(searchTerm))
    {
        <button class="btn btn-outline-danger" type="button" @onclick="ClearSearch" title="Clear">
            <i class="bi bi-x-lg"></i>
        </button>
    }

    <button class="btn btn-primary" type="button" @onclick="GoToAddNewUser">
        <i class="bi bi-plus-lg"></i> Add
    </button>
</div>

@if (onclick)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 30vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-2">Loading users...</span>
    </div>
}
else
{
    @if (listUsers != null && listUsers.Count > 0)
    {
        <table class="table table-striped table-hover table-sm align-middle border rounded">
            <thead class="table-primary">
                <tr>
                    <th scope="col">UserId</th>
                    <th scope="col">UserName</th>
                    <th scope="col">Full Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Phone</th>
                    <th scope="col">Role</th>
                    <th scope="col" class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in listUsers.Where(u =>
                        string.IsNullOrWhiteSpace(searchTerm) ||
                        (u.UserName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (u.FullName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (u.PhoneNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                        ))
                {
                    <tr>
                        <td>@user.UserId</td>
                        <td>@user.UserName</td>
                        <td>@user.FullName</td>
                        <td>@user.Email</td>
                        <td>@user.PhoneNumber</td>
                        <td>@user.Role</td>
                        <td class="text-center">
                            <div class="btn-group btn-group-sm" role="group">
                                <button class="btn btn-warning" title="Edit"
                                        @onclick="() => GotoEdit(user.UserId)">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button>
                                <button class="btn btn-danger" title="Delete"
                                        @onclick="() => OpenDeleteModal(user.UserId)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<PopupConfirm @ref="confirmModal" Title="Delete" OnConfirmClicked="GoToDelete">
    <p>Bạn có chắc muốn xóa?</p>
</PopupConfirm>

@code {
    private List<GetUserDto> listUsers = new();
    private bool onclick = false;
    private PopupConfirm confirmModal = null!;
    private Guid selectedUserId;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetListUsers();
    }

    private async Task GetListUsers()
    {
        onclick = true;
        try
        {
            listUsers = await EmployeesService.GetAllUsersAsync();
            onclick = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while querying Database: {ex.Message}");
        }
    }

    private void GoToAddNewUser()
    {
        Navigation.NavigateTo("/employees-management/add-new-user");
    }

    private void OpenDeleteModal(Guid userId)
    {
        selectedUserId = userId;
        confirmModal.Show();
    }

    private async Task GoToDelete()
    {
        try
        {
            await EmployeesService.DeleteUserAsync(selectedUserId);
            await GetListUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while querying Database: {ex.Message}");
        }
    }

    private void GotoEdit(Guid userId)
    {
        Navigation.NavigateTo($"/employees-management/edit-user/{userId}");
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        StateHasChanged();
    }
}
