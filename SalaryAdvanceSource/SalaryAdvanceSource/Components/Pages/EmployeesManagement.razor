@page "/employees-management"
@using SalaryAdvanceSource.DTOs
@using SalaryAdvanceSource.Services
@inject IEmployeesService EmployeesService
@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Employees Management</PageTitle>

<h1>Employees Management</h1>

<button class="btn btn-primary" @onclick="GetListUsers">Get List Users</button>
<button class="btn btn-primary" @onclick="GoToAddNewUser">Add New User</button>

@if (listUsers == null || listUsers.Count == 0)
{
    @* <p>No employees found.</p> *@
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>UserId</th>
                <th>UserName</th>
                <th>FullName</th>
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>Role</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in listUsers)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.UserName</td>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.Role</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GetUserDto> listUsers = new();

    private async Task GetListUsers()
    {
        try
        {
            listUsers = await EmployeesService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while querying Database: {ex.Message}");
        }
    }
    private void GoToAddNewUser()
    {
        Navigation.NavigateTo("/add-new-user");
    }
}
