@page "/employees-management"
@using SalaryAdvanceSource.DTOs
@using SalaryAdvanceSource.Services
@inject IEmployeesService EmployeesService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Employees Management</PageTitle>

<h1 class="mb-4">Employees Management</h1>

<!-- Search box -->
<div class="input-group input-group-sm mb-3" style="max-width: 500px;">
    <input type="text"
           class="form-control"
           placeholder="Search by name or email/phone number..."
           value="@searchTerm"
           @oninput="OnSearchChanged" />

    @if (!string.IsNullOrWhiteSpace(searchTerm))
    {
        <button class="btn btn-outline-danger" type="button" @onclick="ClearSearch" title="Clear">
            <i class="bi bi-x-lg"></i>
        </button>
    }

    <button class="btn btn-primary" type="button" @onclick="GoToAddNewUser">
        <i class="bi bi-plus-lg"></i> Add
    </button>
</div>

<!-- Loading -->
@if (loading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 30vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-2">Loading users...</span>
    </div>
}
else
{
    @if (listUsers?.Count > 0)
    {
        <table class="table table-striped table-hover table-sm align-middle border rounded">
            <thead class="table-primary">
                <tr>
                    <th>UserName</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Role</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in listUsers)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.FullName</td>
                        <td>@user.Email</td>
                        <td>@user.PhoneNumber</td>
                        <td>@user.Role</td>
                        <td class="text-center">
                            <div class="btn-group btn-group-sm" role="group">
                                <button class="btn btn-warning" title="Edit"
                                        @onclick="() => GotoEdit(user.UserId)">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button>
                                <button class="btn btn-danger" title="Delete"
                                        @onclick="() => OpenDeleteModal(user.UserId)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <nav class="mt-3" aria-label="Page navigation">
            <ul class="pagination pagination-sm justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>

                @for (var i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">
                            @pageNumber
                        </button>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <p>No users found.</p>
    }
}

<PopupConfirm @ref="confirmModal" Title="Delete" OnConfirmClicked="GoToDelete">
    <p>Bạn có chắc muốn xóa?</p>
</PopupConfirm>

@code {
    private List<GetUserDto> listUsers = new();
    private bool loading = false;
    private PopupConfirm confirmModal = null!;
    private Guid selectedUserId;
    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalCount = 0;

    private System.Timers.Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > totalPages) return;
        await LoadUsersAsync(page);
    }

    private async Task LoadUsersAsync(int page = 1)
    {
        if (loading) return;

        loading = true;
        currentPage = page;
        StateHasChanged();

        try
        {
            var request = new PagedRequestDto
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchTerm = searchTerm
            };

            var result = await EmployeesService.GetUsersAsync(request);
            listUsers = result.Items;
            totalCount = result.TotalCount;
            totalPages = Math.Max(1, (int)Math.Ceiling(totalCount / (double)pageSize));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while querying Database: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        debounceTimer?.Stop();
        debounceTimer = new System.Timers.Timer(300) { AutoReset = false };
        debounceTimer.Elapsed += async (_, _) =>
        {
            await InvokeAsync(async () => await LoadUsersAsync(1));
        };
        debounceTimer.Start();
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadUsersAsync(1);
    }

    private void GoToAddNewUser()
    {
        Navigation.NavigateTo("/employees-management/add-new-user");
    }

    private void OpenDeleteModal(Guid userId)
    {
        selectedUserId = userId;
        confirmModal.Show();
    }

    private async Task GoToDelete()
    {
        try
        {
            await EmployeesService.DeleteUserAsync(selectedUserId);
            await LoadUsersAsync(currentPage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while querying Database: {ex.Message}");
        }
    }

    private void GotoEdit(Guid userId)
    {
        Navigation.NavigateTo($"/employees-management/edit-user/{userId}");
    }
}
