@page "/employees-management/edit-user/{id:guid}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SalaryAdvanceSource.DTOs
@using SalaryAdvanceSource.Models
@using SalaryAdvanceSource.Services
@inject IInformation Information
@inject IEmployeesService EmployeesService
@rendermode InteractiveServer
@inject NavigationManager Navigation

<h3 class="mb-4">Edit User</h3>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit" FormName="UserForm" class="p-3 border rounded bg-light">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-6">
            <label for="userName" class="form-label">Username</label>
            <InputText id="userName" @bind-Value="user.UserName" class="form-control form-control-sm" disabled />
            <ValidationMessage For="@(() => user.UserName)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="departmentId" class="form-label">Department</label>
            <InputSelect id="departmentId"
                         @bind-Value="user.DepartmentName"
                         class="form-select form-select-sm"
                         @onchange="OnDepartmentChanged">
                <option value="">--Chọn phòng ban--</option>
                @if (listDepartments != null)
                {
                    @foreach (var dep in listDepartments)
                    {
                        <option value="@dep.Key">@dep.Description</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.DepartmentName)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="fullName" class="form-label">Full Name</label>
            <InputText id="fullName" @bind-Value="user.FullName" class="form-control form-control-sm" disabled />
            <ValidationMessage For="@(() => user.FullName)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control form-control-sm" disabled />
            <ValidationMessage For="@(() => user.Email)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="phoneNumber" class="form-label">Phone Number</label>
            <InputText id="phoneNumber" @bind-Value="user.PhoneNumber" class="form-control form-control-sm" disabled />
            <ValidationMessage For="@(() => user.PhoneNumber)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="address" class="form-label">Address</label>
            <InputText id="address" @bind-Value="user.Address" class="form-control form-control-sm" disabled />
            <ValidationMessage For="@(() => user.Address)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="dob" class="form-label">Date Of Birth</label>
            <InputDate id="dob" @bind-Value="user.DateOfBirth" class="form-control form-control-sm" disabled />
            <ValidationMessage For="@(() => user.DateOfBirth)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label class="form-label d-block">Gender</label>
            <InputRadioGroup @bind-Value="user.Gender" Name="gender">
                <div class="d-flex gap-3">
                    @foreach (GenderType gender in Enum.GetValues(typeof(GenderType)))
                    {
                        <div class="form-check form-check-inline">
                            <InputRadio class="form-check-input" Value="@gender" disabled />
                            <label class="form-check-label">@gender</label>
                        </div>
                    }
                </div>
            </InputRadioGroup>
            <ValidationMessage For="@(() => user.Gender)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="role" class="form-label">Role</label>
            <InputSelect id="role" class="form-select form-select-sm" @bind-Value="user.Role">
                @foreach (RoleType role in Enum.GetValues(typeof(RoleType)))
                {
                    <option value="@role">@role</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.Role)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="position" class="form-label">Position</label>
            <InputSelect id="position"
                         @bind-Value="user.Job"
                         class="form-select form-select-sm">
                <option value="">--Chọn vị trí--</option>
                @if (listPositions != null)
                {
                    @foreach (var pos in listPositions)
                    {
                        <option value="@pos.Key">@pos.Description</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.Job)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="onboardDate" class="form-label">Onboard Date</label>
            <InputDate id="onboardDate" @bind-Value="user.OnboardDate" class="form-control form-control-sm" />
            <ValidationMessage For="@(() => user.OnboardDate)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label for="salary" class="form-label">Basic Salary</label>
            <div class="input-group input-group-sm">
                <input id="salary"
                       class="form-control"
                       value="@formattedSalary"
                       @oninput="OnSalaryInput" />
                <span class="input-group-text">₫</span>
            </div>
            <ValidationMessage For="@(() => user.BasicSalary)" class="text-danger small" />
        </div>

        <div class="col-md-6">
            <label class="form-label d-block">Active</label>
            <InputRadioGroup @bind-Value="user.IsActive" Name="active">
                <div class="form-check form-check-inline">
                    <InputRadio class="form-check-input" Value="true" />
                    <label class="form-check-label">True</label>
                </div>
                <div class="form-check form-check-inline">
                    <InputRadio class="form-check-input" Value="false" />
                    <label class="form-check-label">False</label>
                </div>
            </InputRadioGroup>
            <ValidationMessage For="@(() => user.IsActive)" class="text-danger small" />
        </div>
    </div>

    <div class="mt-4 d-flex gap-2">
        <button type="submit" class="btn btn-primary btn-sm">Cập nhật</button>
        <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Navigation.NavigateTo(backUrl)">Huỷ</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public Guid id { get; set; }

    private CreateUserDto user = new(); 
    private List<GetInfo> listDepartments = new();
    private List<GetInfo> listPositions = new();
    private string backUrl = "/employees-management";

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
        await LoadUser();
        formattedSalary = string.Format(
            new System.Globalization.CultureInfo("vi-VN"),
            "{0:N0}",
            user.BasicSalary
        );
    }


    private async Task LoadDepartments()
    {
        try
        {
            listDepartments = await Information.GetListInfo("POS");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
            // notificationModal.Show("Không thể tải danh sách phòng ban.");
        }
    }

    private async Task OnDepartmentChanged(ChangeEventArgs e)
    {
        var departmentKey = e.Value?.ToString();
        user.DepartmentName = departmentKey!;

        if (!string.IsNullOrEmpty(departmentKey))
        {
            await LoadPositions(departmentKey);
        }
        else
        {
            listPositions.Clear();
            user.Job = null!;
        }
    }

    private async Task LoadPositions(string departmentKey)
    {
        try
        {
            listPositions = await Information.GetListInfo(departmentKey);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading positions: {ex.Message}");
            // notificationModal.Show("Không thể tải danh sách vị trí.");
        }
    }

    private async Task LoadUser()
    {
        try
        {
            user = await EmployeesService.GetUserByIdAsync(id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while loading user: {ex.Message}");
        }
    }

    private string formattedSalary = "";

    private void OnSalaryInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";

        var digitsOnly = new string(input.Where(char.IsDigit).ToArray());

        if (decimal.TryParse(digitsOnly, out var value))
        {
            user.BasicSalary = value;
            formattedSalary = string.Format(new System.Globalization.CultureInfo("vi-VN"), "{0:N0}", value);
        }
        else
        {
            user.BasicSalary = 0;
            formattedSalary = "";
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            await EmployeesService.UpdateUserAsync(user, id);
            Navigation.NavigateTo("/employees-management");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while updating user: {ex.Message}");
        }
    }
}
