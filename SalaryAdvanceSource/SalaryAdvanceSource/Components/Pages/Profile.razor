@page "/profile"
@inject AuthenticationStateProvider AuthStateProvider
@inject ILoginService LoginService
@inject UserState UserState
@rendermode InteractiveServer

<div class="container mt-4">
    <h3 class="mb-4">User Profile</h3>
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageCss">@message</div>
    }
    @if (UserState.CurrentUser == null)
    {
        <div class="alert alert-warning">Bạn chưa đăng nhập.</div>
    }
    else
    {
        <!-- Nút thao tác -->
        <div class="mt-3">
            @if (isEditing)
            {
                <button class="btn btn-success btn-sm me-2" @onclick="SaveChanges">Save</button>
                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
            }
            else
            {
                <button class="btn btn-primary btn-sm" @onclick="EnableEdit">Edit</button>
            }
        </div>
        <div class="p-3 border rounded bg-light">
            
            <div class="row g-3">
                <!-- Avatar -->
                <div class="col-md-12">
                    <label class="form-label fw-bold">Avatar</label>

                    @if (isEditing)
                    {
                        <InputFile OnChange="HandleAvatarUpload" accept="image/*" />
                        @if (!string.IsNullOrWhiteSpace(previewAvatar))
                        {
                            <img src="@previewAvatar" alt="Avatar Preview"
                                 class="img-thumbnail mt-2"
                                 style="max-height:150px;" />
                        }
                    }
                    else
                    {
                        @if (!string.IsNullOrWhiteSpace(UserState.CurrentUser.AvatarPath))
                        {
                            <img src="@UserState.CurrentUser.AvatarPath" alt="User Avatar"
                                 class="img-thumbnail bg-light"
                                 style="max-height:150px;" />
                        }
                        else
                        {
                            <div class="form-control form-control-sm bg-light text-muted">
                                Chưa có ảnh đại diện
                            </div>
                        }
                    }
                </div>

                <!-- Full Name -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Full Name</label>
                    @if (isEditing)
                    {
                        <input class="form-control form-control-sm" @bind="editUser.FullName" />
                    }
                    else
                    {
                        <div class="form-control form-control-sm bg-light text-muted">
                            @UserState.CurrentUser.FullName
                        </div>
                    }
                </div>

                <!-- Email -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Email</label>
                    @if (isEditing)
                    {
                        <input class="form-control form-control-sm" @bind="editUser.Email" />
                    }
                    else
                    {
                        <div class="form-control form-control-sm bg-light text-muted">
                            @UserState.CurrentUser.Email
                        </div>
                    }
                </div>

                <div class="col-md-6">
                    <label class="form-label fw-bold">Gender</label>
                <div class="form-control form-control-sm bg-light text-muted">
                        @UserState.CurrentUser.Gender
                    </div>
                </div>

                <!-- Department -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Department</label>
                <div class="form-control form-control-sm bg-light text-muted">
                        @UserState.CurrentUser.DepartmentName
                    </div>
                </div>

                <!-- Job -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Job Title</label>
                <div class="form-control form-control-sm bg-light text-muted">
                        @UserState.CurrentUser.Job
                    </div>
                </div>

                <!-- Gender -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Gender</label>
                <div class="form-control form-control-sm bg-light text-muted">
                        @(UserState.CurrentUser.Gender == GenderType.Male ? "Nam" :
                                            UserState.CurrentUser.Gender == GenderType.Female ? "Nữ" : "Khác")
                    </div>
                </div>

                <!-- Address -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Address</label>
                @if (isEditing)
                    {
                        <input class="form-control form-control-sm" @bind="editUser.Address" />
                    }
                    else
                    {
                        <div class="form-control form-control-sm bg-light text-muted">
                            @UserState.CurrentUser.Address
                        </div>
                    }
                </div>

                <!-- Phone Number -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Phone Number</label>
                @if (isEditing)
                    {
                        <input class="form-control form-control-sm" @bind="editUser.PhoneNumber" />
                    }
                    else
                    {
                        <div class="form-control form-control-sm bg-light text-muted">
                            @UserState.CurrentUser.PhoneNumber
                        </div>
                    }
                </div>

                <!-- Date of Birth -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Birthday</label>
                    @if (isEditing)
                    {
                        <input type="date" class="form-control form-control-sm" @bind="editUser.DateOfBirth" />
                    }
                    else
                    {
                        <div class="form-control form-control-sm bg-light text-muted">
                            @UserState.CurrentUser.DateOfBirth.ToString("dd/MM/yyyy")
                        </div>
                    }
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-bold">Basic Salary</label>
                    <div class="form-control form-control-sm bg-light text-muted">
                        @UserState.CurrentUser.BasicSalary
                    </div>
                </div>
                <!-- Onboard Date -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">Onboard Date</label>
                    <div class="form-control form-control-sm bg-light text-muted">
                        @UserState.CurrentUser.OnboardDate.ToString("dd/MM/yyyy")
                    </div>
                </div>
                

                <div class="col-md-6">
                    <label class="form-label fw-bold">Password</label>
                    <div class="input-group input-group-sm">
                        @* <input type="text" class="form-control bg-white" value="******" readonly /> *@
                        <NavLink class="btn btn-outline-primary" href="/change-password">
                            Change
                        </NavLink>
                    </div>
                </div>
            </div>

            
        </div>
    }
</div>



@code {
    private bool isEditing = false;
    private UpdateUserProfileDto editUser = new();
    private IBrowserFile uploadedAvatar;
    private string previewAvatar;
    string message;
    string messageCss;

    protected override void OnInitialized()
    {
        if (UserState.CurrentUser != null)
        {
            // Copy dữ liệu ban đầu
            editUser = new UpdateUserProfileDto
            {
                FullName = UserState.CurrentUser.FullName,
                Email = UserState.CurrentUser.Email,
                PhoneNumber = UserState.CurrentUser.PhoneNumber,
                Address = UserState.CurrentUser.Address,
                DateOfBirth = UserState.CurrentUser.DateOfBirth,
                AvatarPath = UserState.CurrentUser.AvatarPath
            };
        }
    }

    private void EnableEdit()
    {
        isEditing = true;
    }

    private void CancelEdit()
    {
        // Reset lại dữ liệu như ban đầu
        editUser = new UpdateUserProfileDto
        {
            FullName = UserState.CurrentUser.FullName,
            Email = UserState.CurrentUser.Email,
            PhoneNumber = UserState.CurrentUser.PhoneNumber,
            Address = UserState.CurrentUser.Address,
            DateOfBirth = UserState.CurrentUser.DateOfBirth,
            AvatarPath = UserState.CurrentUser.AvatarPath
        };
        previewAvatar = null;
        uploadedAvatar = null;
        isEditing = false;
    }

    private const long MaxFileSize = 10 * 1024 * 1024; // 10MB
    private async Task HandleAvatarUpload(InputFileChangeEventArgs e)
    {
        uploadedAvatar = e.File;

        if (uploadedAvatar.Size > MaxFileSize)
        {
            message = $"Ảnh vượt quá {MaxFileSize / (1024 * 1024)}MB.";
            messageCss = "alert-danger";
            uploadedAvatar = null;
            previewAvatar = null;
            return;
        }

        using var ms = new MemoryStream();

        // Resize trước khi preview
        var resizedFile = await uploadedAvatar.RequestImageFileAsync(uploadedAvatar.ContentType, 300, 300);

        // Mở stream đọc đúng dung lượng của resized file
        await resizedFile.OpenReadStream(MaxFileSize).CopyToAsync(ms);

        var bytes = ms.ToArray();

        // Dùng ContentType của resizedFile
        previewAvatar = $"data:{resizedFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
    }
    private async Task SaveChanges()
    {
        try
        {
            // Nếu có upload file mới => lưu vào wwwroot và cập nhật AvatarPath
            if (uploadedAvatar != null)
            {
                var path = await LoginService.UploadUserAvatarAsync(uploadedAvatar, UserState.CurrentUser.UserId);
                editUser.AvatarPath = path;
            }

            var ok = await LoginService.UpdateUserProfileAsync(editUser, UserState.CurrentUser.UserId);
            if (!ok)
            {
                message = "Failed to update profile. Please try again.";
                messageCss = "alert-danger";
                return;
            }

            var updatedUser = await LoginService.GetUserByUsernameAsync(UserState.CurrentUser.UserName);
            if (updatedUser != null)
            {
                UserState.CurrentUser = updatedUser;
            }

            message = "Profile updated successfully.";
            messageCss = "alert-success";
            isEditing = false;
            uploadedAvatar = null;
            previewAvatar = null;
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageCss = "alert-danger";
        }
    }

   

}

